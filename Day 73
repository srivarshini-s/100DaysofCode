Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

CODE:

class Solution {
    static boolean isValid(String s) {
        Stack<Character> st = new Stack<Character>();
        for(char ch:s.toCharArray()){
            if (ch == '(' || ch == '[' || ch == '{') {
                st.push(ch);
            }
            else{
           if (st.isEmpty())
                return false;
            char c=st.pop();
            switch (ch) {
                case ')':
                    if (c !='(' )
                        return false;
                break;
                
                case '}':
                    if (c != '{')
                        return false;
                    break;

                case ']':
                    if (c != '[')
                        return false;
                    break;
            }
        }
        }
        return st.isEmpty();
    }
}
